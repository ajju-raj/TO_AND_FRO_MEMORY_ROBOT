#include <ESP8266WiFi.h>
#include <WiFiClient.h>

WiFiClient client;
WiFiServer server(80);
unsigned long tim = millis();

class Stack {
  int top;
  int len;
  public:
    int a[35];
  Stack(){
      top = -1;
      len = 0;
  }
  void push(int x);
  int pop();
  int le();
  bool isEmpty();
};
void Stack::push(int x) {
  a[++top] = x;
  len++;
}
int Stack::pop() {
  int x = a[top--];
  len--;
  return x;
}
int Stack::le() {
  return len;
}
bool Stack::isEmpty() {
  return (len == 0);
}

const char* ssid = "this";
const char* password = "12345678";
String data = "";
const int motorAPin1 = D1; // GPIO5
const int motorAPin2 = D2; // GPIO4
const int motorBPin1 = D3; // GPIO0
const int motorBPin2 = D4; // GPIO2
const int enA = D5;
const int enB = D6;
int SPEED = 219;
int SPEED_LOW_ = 225;
int SPEED_HIGH = 1001;

Stack in;
void setup() {
  Serial.begin(115200);
  delay(100);
  Serial.println("Connecting to Wi-Fi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  pinMode(motorAPin1, OUTPUT);
  pinMode(motorAPin2, OUTPUT);
  pinMode(motorBPin1, OUTPUT);
  pinMode(motorBPin2, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(enA, OUTPUT);
  analogWrite(enA, 0);
  analogWrite(enB, 0);
  server.begin();
}

unsigned long currentTime;
unsigned long previousTime;
const unsigned long timeStep = 1201;
const unsigned long commandDuration = 1301;
const unsigned long commandDuration_l = 1501;
const unsigned long commandDuration_l_retrace = 1801;
const unsigned long commandDuration_r = 1701; 
const unsigned long commandDuration_r_retrace = 1301;

void handleForward() {
  motorForward();
  delay(commandDuration);
  motorStop();
}
void handleBackward() {
  motorBackward();
  delay(commandDuration);
  motorStop();
}
void handleRight() {
  motorRight();
  delay(commandDuration_r);
  motorStop();
}
void handleLeft() {
  motorLeft();
  delay(commandDuration_l);
  motorStop();
}
void handleReverse() {
  Serial.println("-------------------------");
  Serial.println("Reversing");
  retracePath();
}
unsigned long commandStartTime = 0;
void loop() {
  client = server.available();
  if (!client) return;
  data = checkClient();
  if (data == "FORWARD" || data == "BACKWARD" || data == "LEFT" || data == "RIGHT" || data == "RETRACE") {
    commandStartTime = millis();
  }
  if (data == "FORWARD") {
    handleForward();
    in.push(0);
  }
  else if (data == "BACKWARD") {
    handleBackward();
    in.push(1);
  }
  else if (data == "LEFT") {
    handleLeft();
    in.push(2);
  }
  else if (data == "RIGHT") {
    handleRight();
    in.push(3);
  }
  else if (data == "RETRACE") {
    handleReverse();
  }
}
void motorForward() {
  analogWrite(enA, SPEED_LOW_);
  digitalWrite(motorAPin1, LOW);
  digitalWrite(motorAPin2, HIGH);
  digitalWrite(motorBPin1, LOW);
  digitalWrite(motorBPin2, HIGH);
  analogWrite(enB, SPEED);
  Serial.println("FORWARD");
}
void motorBackward() {
  analogWrite(enA, SPEED_LOW_);
  digitalWrite(motorAPin1, HIGH);
  digitalWrite(motorAPin2, LOW);
  digitalWrite(motorBPin1, HIGH);
  digitalWrite(motorBPin2, LOW);
  analogWrite(enB, SPEED);
  Serial.println("BACKWARD");
}
void motorRight() {
  analogWrite(enA, SPEED_LOW_);
  digitalWrite(motorAPin1, LOW);
  digitalWrite(motorAPin2, HIGH);
  digitalWrite(motorBPin1, HIGH);
  digitalWrite(motorBPin2, LOW);
  analogWrite(enB, SPEED);
  Serial.println("RIGHT");
}
void returnRight() {
  analogWrite(enA, SPEED_LOW_);
  digitalWrite(motorAPin1, HIGH);
  digitalWrite(motorAPin2, LOW);
  digitalWrite(motorBPin1, LOW);
  digitalWrite(motorBPin2, HIGH);
  analogWrite(enB, SPEED);
  Serial.println("RIGHT()");
}
void motorLeft() {
  analogWrite(enA, SPEED_LOW_);
  digitalWrite(motorAPin1, HIGH);
  digitalWrite(motorAPin2, LOW);
  digitalWrite(motorBPin1, LOW);
  digitalWrite(motorBPin2, HIGH);
  analogWrite(enB, SPEED);
  Serial.println("LEFT");
}
void returnLeft() {
  analogWrite(enA, SPEED_LOW_);
  digitalWrite(motorAPin1, LOW);
  digitalWrite(motorAPin2, HIGH);
  digitalWrite(motorBPin1, HIGH);
  digitalWrite(motorBPin2, LOW);
  analogWrite(enB, SPEED);
  Serial.println("LEFT()");
}
void motorStop() {
  analogWrite(enA, 0);
  digitalWrite(motorAPin1, LOW);
  digitalWrite(motorAPin2, LOW);
  digitalWrite(motorBPin1, LOW);
  digitalWrite(motorBPin2, LOW);
  analogWrite(enB, 0);
  Serial.println("STOP");
}
void retracePath() {
  for (int i = in.le(); i > 0; i--) {
    if (!(in.isEmpty())) {
      int cmd = in.pop();
      if (cmd == 0) { // Forward
        motorBackward();
        delay(commandDuration);
        motorStop();
      } 
      else if (cmd == 1) { // Backward
        motorForward();
        delay(commandDuration);
        motorStop();
      } 
      else if (cmd == 2) { // Left
        returnLeft();
        delay(commandDuration_l_retrace);
        motorStop();
      } 
      else if (cmd == 3) { // Right
        returnRight();
        delay(commandDuration_r_retrace);
        motorStop();
      }
    }
  }
  Serial.println("Completed the Path");
}
String checkClient() {
  while (!client.available()) delay(1);
  String request = client.readStringUntil('\r');
  request.remove(0, 5);
  request.remove(request.length() - 9, 9);
  return request;
}
